ASSIGNMENT SPECIFICATIONS:
For this assignment in PRG550 this semester, you will use your Raspberry Pi
running Python 3.10.5 and the NGINX web server 1.22.1 and create an HTML form (client)
and a Python CGI (server) program that allows users to select 5 cards (from a deck of
52 cards) representing a "Poker" hand and determines whether the category of poker
that poker hands ranked in order from lowest to highest:
High card, 1 pair, 2 pair, 3 of a kind, straight, flush, full house,
4 of a kind, and straight flush (see below for category codes).
Please refer to this wikipedia page for a complete description and
explanation of poker hands:

http://en.wikipedia.org/wiki/Poker_hands

Here are the 52 (strings) your program MUST use to represent all 52 cards in the deck:

"2h", "3h", "4h", "5h", "6h", "7h", "8h", "9h", "th", "jh", "qh", "kh", "ah"
"2c", "3c", "4c", "5c", "6c", "7c", "8c", "9c", "tc", "jc", "qc", "kc", "ac"
"2s", "3s", "4s", "5s", "6s", "7s", "8s", "9s", "ts", "js", "qs", "ks", "as"
"2d", "3d", "4d", "5d", "6d", "7d", "8d", "9d", "td", "jd", "qd", "kd", "ad"

This card deck MUST be stored in a Python dictionary with the cards as values
and an index of 0 to 51 as the keys!

Your html form MUST allow the user to select EXACTLY 5 UNIQUE cards from ALL 52 cards in the deck
as a checkbox input type with card images displayed in place of the text (see below).
The images used in the sample below (as well as all images for all the other cards) can be
downloaded here: cards.zip


 ... 
 ... 


If the user does not select exactly 5 cards, then your server program will send back
an HTML reponse back to the client informing the user that they have made an error and
instructs the user to hit the "BACK" button and select again!

Once 5 cards have been selected, your program MUST determine what poker hand the 5 cards
represent and send back an HTML response consisting of the 5 cards (as images) selected
by the user (sorted in rank order from low to high) and a message indicating the hand category
(i.e. High card, 1 pair, 2 pair, 3 of a kind, etc).
In addition, the following function MUST be called and displayed as HTML output:

import subprocess

def piInfo():
   print(subprocess.check_output("date", shell=True, text=True))
   print(subprocess.check_output("ps ax | grep nginx", shell=True, text=True))
   print(subprocess.check_output("uname -a", shell=True, text=True))
   print(subprocess.check_output("cat /sys/class/net/eth0/address", shell=True, text=True))
   print(subprocess.check_output("cat /proc/cpuinfo | tail -5", shell=True, text=True))
   print(subprocess.check_output("ifconfig | grep netmask", shell=True, text=True))

# end def

piInfo( )


Your html form must also provide a "Check Poker Hand" (submit) button that executes your
script as well as a "Clear" (reset) button that resets your form back to default values.

For example, if the user selects the following cards: 2h, kh, 7d, 7s, 7c
then your Python program would send back an HTML response of:

    
Your Poker Hand represents a THREE OF A KIND!

Thu 17 Nov 2022 01:57:32 PM EST

19531 ?        Ss     0:00 nginx: master process /usr/local/nginx/nginx
19532 ?        S      0:00 nginx: worker process
29501 pts/0    S+     0:00 grep nginx

Linux piCM4devSSD 5.15.61-v8+ #1579 SMP PREEMPT Fri Aug 26 11:16:44 BST 2022 aarch64 GNU/Linux

dc:a6:32:1a:93:fc

Hardware        : BCM2835
Revision        : c03140
Serial          : 9000000028b5a66f
Model           : Raspberry Pi Compute Module 4 Rev 1.0

inet 192.168.0.24  netmask 255.255.255.0  broadcast 192.168.0.255
inet 127.0.0.1  netmask 255.0.0.0



Your HTML form MUST be placed in your       /usr/local/nginx/html/   directory on your Raspberry Pi, and
your Python program MUST be placed in your /usr/local/nginx/cgi-bin/ directory on your Raspberry Pi.

Your solution to this assignment MUST include the following user-defined functions
(exactly as named and specified):

def findCategory(cards) :
   This function accepts a list of 5 cards and returns a string representing the category
   for the poker hand the 5 cards represents.
   (i.e. high card, 1 pair, 2 pair, 3 of a kind, straight, flush, full house, 4 of a kind,
   and straight flush). The string indicating the name of the category is as follows:

   high card        = "HC"
   1 pair           = "1P"
   2 pair           = "2P"
   3 of a kind      = "3K"
   straight         = "ST"
   flush            = "FL"
   full house       = "FH"
   4 of a kind      = "4K"
   straight flush   = "SF"

You must also code the following functions that return a boolean value True or False:

def isHighCard(cards) :
   This function accepts a list of 5 cards and returns
   True only if the cards DO NOT contain any of the categories
   of (1 pair, 2 pair, 3 of a kind, straight, flush,
   full house, 4 of a kind, or straight flush).

def isOnePair(cards) :
   This function accepts a list of 5 cards and returns
   True only if the cards contain 1 pair (any 2 cards of the same rank).

def isTwoPair(cards) :
   This function accepts a list of 5 cards and returns
   True only if the cards contain 2 pairs (any 2 cards of the same rank).

def isThreeOfAKind(cards) :
   This function accepts a list of 5 cards and returns
   True only if the cards contain 3 of a kind (any 3 cards of the same rank).

def isStraight(cards) :
   This function accepts a list of 5 cards and returns
   True only if the cards contain a straight (any consequtive
   sequence of five cards starting from the rank of 2).

def isFlush(cards) :
   This function accepts a list of 5 cards and returns
   True only if the cards contain any 5 cards of the same suit.

def isFullHouse(cards) :
   This function accepts a list of 5 cards and returns
   True only if the cards only contain any 3 cards of the same rank
   AND any 2 cards of the same rank.

def isFourOfAKind(cards) :
   This function accepts a list of 5 cards and returns
   True only if the cards only contain any 4 cards of the same rank.

def isStraightFlush(cards) :
   This function accepts a list of 5 cards and returns
   True only if the cards contain a straight (any consequtive
   sequence of five cards starting from the rank of 2 provided
   that all 5 cards are of the same suit).

You are free to write any additional user-defined functions as you see fit.

Once you have completed and thoroughly tested your HTML form (client) and Python script (server),
on your Raspberry Pi, you will DEMONSTRATE YOUR RUNNING PROGRAM for your instructor
on MS Teams, and the source files must then be archived using
7-Zip software:  https://www.7-zip.org